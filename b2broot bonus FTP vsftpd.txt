-- Бонусная часть FTP vsftpd

Сначала я попробовал настроить почтовый сервер для отправки сообщений,
но прочтя доступную информацию и попробовав пару варинтов понял, что отправлять письма
в настоящих условиях та еще задача. Почтовые сервисы (бесплатные и широко 
известные) в целях защиты от спама требуют ряд условий для сервера отправителя
которые в школьном задании прямо скажем излишне и неадекватны задаче, вроде белых
IP, налия dns записей и т.п. Простым решением в этом случае, как мне кажется, 
может настройка отправки через существующую УЗ на сервере т.н. relay, но в эту
сторону я не копал и если кто расскажет, как сделал буду благодарен.
Найденные рецепты настройки, в моем случае, успеха не имели т.к. от почтовиков
приходил отлуп в подозрении на спам и предложением связаться с Тех.Поддержкой.
пара ссылок: 
https://help.ubuntu.ru/wiki/отравка_почты_для_root_на_внешний_ящик
http://help.ubuntu.ru/wiki/postfix_relay_yandex

Поэтому я решил настроить фтп сервис т.к. в данном случае весь контроль на моей 
стороне и не нужно связываться со сторонними сервисами.
Также мне показалось, что это легче сделать :) но я ошибался. Сильно ошибался.)

-- Настройка FTP сервера
Первым делом нужно понять как работает фтп сервер
Можно почитать этот пост
https://russianblogs.com/article/6397547141/

Вторым делом собственно установить фтп-сервер, см. ниже

Третьим делом отключите для настройки файрволл, чтобы при настройке ФТП небыло лишних 
граблей, накидаете позже когда убедитесь что фтп работает. Включите потом, когда 
настроите фтп и нужно будет разбираться с портами
(Напоминаю это школьный проект, не отключайте файрвол на рабочих системах!)
sudo ufw disable
sudo ufw status

Если вы работае на своем компьютере в убунте, то в настройках по умолчанию 
установленный ufw блокирует все входящие порты, нужные порты нужно открывать вручную
sudo ufw allow port_num/tcp

это значит, что активный режим фтп работать не будет, т.к. клиент в этом режиме передает
серверу номер порта где он ждет данные, а файрволл это дело блочит.
как выход нужно поменять правило по умолчанию для входящих:
sudo ufw default allow incoming

теперь файрвол пропускает все соединения к процессам в компе и к вирусам тоже, если есть.) 
Чтобы вернуть обратно:
sudo ufw default deny incoming

https://1cloud.ru/help/security/ispolzovanie-utility-ufw-na-inux

лучшее решение, для домашней машины, будет открыть все порты кроме общеизвестных, хотя и спорно:
sudo ufw allow 1024:65535/tcp
sudo ufw allow 1024:65535/udp

https://ru.wikipedia.org/wiki/Список_портов_TCP_и_UDP#Общеизвестные_порты

собственно установка и настройка не отличается от уже сделанных работ ранее,
ссылки для ознакомления:
https://github.com/codesshaman/born2beRoot
https://github.com/hanshazairi/42-born2beroot
https://gist.github.com/yuikns/d4967713693bef2b6423c89ddd3d155d

Возможности vsftpd и примеры их использования.
https://www.opennet.ru/base/net/vsftpd_overview.txt.html
https://wiki.debian.org/ru/vsftpd
https://wiki.debian.org/ru/vsftpd/vsftpd.conf
немного how-to
https://1cloud.ru/help/linux/kak-nastroit-vsftpd-ubuntu-12
https://serverspace.ru/support/help/nastroika-vsftpd-v-ubuntu/

теперь собственно конфиг c комментариями:

--- Example config file /etc/vsftpd.conf ----
#
# как я понял из документации listen и listen_ipv6 взаимоисключащие флаги
# если один yes то второй no
listen=YES
#
# отключаю ipv6, мне так хочется )
listen_ipv6=NO
#
# Allow anonymous FTP? (Disabled by default).
# анонов фтопку, фтп только для друзей
anonymous_enable=NO
#
# Uncomment this to allow local users to log in.
# можно пользоваться только зареганным персонажам сервера
local_enable=YES
#
# Uncomment this to enable any form of FTP write command.
# наши персы могут писать, создать папки, удалять и пр.
# т.е. пользоваться всем ассортиментом команд для работы с файловой системой.
write_enable=YES
#
# Default umask for local users is 077. You may wish to change this to 022,
# if your users expect that (022 is used by most other ftpd's)
# это маска, чтобы потом сами могли себе поудалять, что написали
local_umask=022
#
# я пропущу ключи которые не трогал... или в данном проекте не интересны
# 
# Make sure PORT transfer connections originate from port 20 (ftp-data).
# включаем активный режим фтп
connect_from_port_20=YES
#
# You may fully customise the login banner string:
# ну как же без баннера во всю строку... реклама двигатель и все такое...
ftpd_banner=Welcome to cyetta FTP service!
#
# You may restrict local users to their home directories.  See the FAQ for
# the possible risks in this before using chroot_local_user or
# chroot_list_enable below.
# запираем персов в домашних папках, иначе будут ходить по закоулкам сервера
# еще скрутят чего нужное
chroot_local_user=YES
# 
# эта хитрая конструкция ниже, позволяет использовать в домашней папке, папку
# ftp как корень диска доступный по фтп, причем root должен быть ее владельцем
# ls -la
# dr-xr-xr-x 4 root   root    4096 дек 23 23:03 ftp
# ls -la ftp
# dr-xr-xr-x 4 root   root   4096 дек 23 23:03 .
# drwxr-xr-x 2 user_name user_name 4096 дек 24 14:15 files
# drwxr-xr-x 2 user_name user_name 4096 дек 24 15:48 folder1
# параноики, в хорошем слысле, которые делали сервер, запрещают доступ на 
# запись пользователям в корневой каталог фтп, а в подпапки всегда пожалуйста.
# создавай их под под sudo, chown, chmod и пользуй на здоровье
# Пример: (в домашней папке user_name)
# cd ~
# sudo mkdir ftp1
# sudo chmod -w ftp
# sudo mkdir ftp1/data
# sudo chown user_name:user_name ftp1/data
# теперь пользователь может совершенно невозбранно лить файло в папку дата
# а в корне фтп под учеткой user_name будет видна одинокая папка data и в корень
# ничего не запишешь ибо БЕЗОПАСНОСТЬ - низзя (. )(. )
# НО! если очь хочется, можно запользовать ключ, который отменяет проверку 
# записи в домашний каталог
# allow_writeable_chroot=YES
# Кстати невозбраняется пробовать забить на эту безопасность и сделать 
# папки без всяких этих chmod chown, посмотрите как вас будет посылать сервер
# занятными сообщениями, потом погуглить ругательства сервера, просветлиться
# и сделать как положено
#
user_sub_token=$USER
local_root=/home/$USER/ftp
#
# Задаем белый список персонажей в файле /etc/vsftpd.usrlist
# учетки в файле перечислятся с новой строки, может можно и пробелами разделять,
# не проверял.
userlist_enable=YES
userlist_file=/etc/vsftpd.usrlist
userlist_deny=NO
#
# Включаем пассивный режим работы сервера
pasv_enable=YES
pasv_min_port=32768
pasv_max_port=33280

# Uncomment this to indicate that vsftpd use a utf8 filesystem.
# русские буковки в названиях файлов тоже можно.
utf8_filesystem=YES
------
Вот, теперь можно попробовать работу фтп сервера.
Если все хорошо папки открываются и в активном и в пассивном режиме, файлы закачиваются
можно подбросить граблей ) - включить файрвол.

Включаем файрвол
ufw enable
ufw status verbose

Открываем нужные порты для работы пассивного и активных режимов
надеюсь вы помните, как работает процесс передачи фтп, если что см. п."первым делом"

на сервере:
открываем порты 20,21 и те что определены в диапазоне pasv_min_port=32768,
 pasv_max_port=33280

ufw allow 20/tcp
ufw allow 21/tcp
ufw allow 32768:33280/tcp

ufw status - должен отобразить что-то вроде
Status: active

To                         Action      From
--                         ------      ----
20/tcp                     ALLOW       Anywhere                  
21/tcp                     ALLOW       Anywhere                  
32768:33280/tcp            ALLOW       Anywhere                  
20/tcp (v6)                ALLOW       Anywhere (v6)             
21/tcp (v6)                ALLOW       Anywhere (v6)             
32768:33280/tcp (v6)       ALLOW       Anywhere (v6)  

на локальном компе:
открываем пользовательские порты с 1024:65535
sudo ufw allow 1024:65535/tcp
sudo ufw allow 1024:65535/udp
или если знаете на каких портах будет ждать ваш фтп клиент данные, открываем только эти порты.
Это нужно для активного режима фтп. Если прав нет, забейте, не судьба вам пользовать 
активный режим, пользуйтесь пассивным, он тоже неплох...

В настройках вирт. машины я изменил тип подключения с NAT на Bridge (сетевой мост)
при этом теперь приходится обращаться к машине напрямую по IP
Это связано с тем, что virtualbox не пробрасывает порты ниже 1024 при запуске от пользователя,
такое возможно только при запуске от рута, но это не есть правильно.

Уточнение! Это справедливо для убунты точно, но в школьных маках порты ниже 1024 пробрасываются
на ура, в отличии от моей домашней машины (
https://www.virtualbox.org/manual/ch06.html#natforward
6.3.3. NAT Limitations
Forwarding host ports below 1024. On UNIX-based hosts, such as Linux, Oracle Solaris, and Mac OS X,
it is not possible to bind to ports below 1024 from applications that are not run by root.
As a result, if you try to configure such a port forwarding, the VM will refuse to start.

Для любитей NAT тоже есть решение:
# Установите в "YES", если вы хотите использовать hostname (в противоположность IP-адресу)
# в параметре "pasv_address".
# По-умолчанию: NO
# в pasv_address можно записать днс имя для внешненго IP NAT и тогда при каждом разрешении имя будет 
# разрешаться во внешний IP NAT
pasv_addr_resolve=NO
#
# Параметр содержит IP-адрес, который vsftpd будет выдавать в ответ на команду "PASV". 
# Указывается в виде числового IP-адреса, если параметр "pasv_addr_resolve" не установлен в 
# "YES", и, указанное вместо IP-адреса, имя хоста не сможет быть преобразовано в IP-адрес.
# По-умолчанию: (ничего - адрес берётся из сокета входящего соединения)
pasv_address=внешний IP NAT
# для нашей работы это или 127.0.0.1 или каждый раз смотреть IP hosta
# плюс прокинуть все порты из диапазона pasv_min_port=, pasv_max_port= в настройках 
# вирт машины. Я так и не понял как можно пачку прокинуть, а по одному это жесть.
# в итоге ограничился десятком портов, для примера хватит

На этом вроде все...
Для отладки лучше использовать логирование ufw, хотя я сам использовал костыль, 
эдакий printf, т.к. в процессе своего просветления еще не добрался до описания логирования.
netstat -tupnc | grep -E "Proto|vsftpd" - команда мониторит активные в данный момент 
подключения, фильтрует строки с фтп сервисом и выводит на экран
ctrl+s - пауза
ctrl+q - продолжить

